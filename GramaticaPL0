PROGRAMA
  = codigo:BLOQUE "."{
    return{
      type: "PROGRAMA",
      value: codigo
    }
  }
  
BLOQUE
  = codigo:(PRIMARIO)*{
    return{
        type: "BLOQUE",
        value: codigo
    }
  }
  
PRIMARIO
  = "const" iden:(ID "=" NUM ("," ID "=" NUM)*) ";"{
    return {
      type: "CONST",
      id: iden
    }
  }
  / "var" iden:(ID ("," ID)*) ";"{
    return {
      type: "VARIABLE",
      id: iden
    }
  }
  / "procedure" iden:ID "(" argu:((ARGUMENTO ",")* ARGUMENTO) ")" ";" bloque:BLOQUE ";"{
    return{
      type: "PROCEDURE",
      id: iden,
      arg: argu,
      bloq: bloque
    }
  }
  / instru:INSTRUCCION{
    return {
      type: "INSTRUCCION",
      instr: instru
    }
  }
  
INSTRUCCION
  = iden:ID ":=" expr:EXPRESION{
    return {
      type: "ASIGNACION",
      id: iden,
      exp: expr
    }
  }
  / "call" iden:ID "(" argu:((ARGUMENTO ",")* ARGUMENTO) ")"{
    return {
      type: "CALL",
      id: iden,
      args: argu
    }
  }
  / "?" ident:ID{
    return {
      type: "?",
      id: ident
    }
  }
  / "!" expr:EXPRESION{
    return {
      type: "!",
      exp: expr
    }
  }
  / "begin" instruc:(INSTRUCCION ";")+ "end"{
    return {
      type: "BEGIN-END",
      instr: instruc
    }
  }
  / "if" condi:CONDICION "then" instr1:(INSTRUCCION)+ elseterm:("else" instr2:(INSTRUCCION)+)?{
    return {
      type: "IF",
      cond: condi,
      instr: instr1,
      else: elseterm
    }
  }
  / "while" condi:CONDICION "do" instru:(INSTRUCCION)+{
    return {
      type: "WHILE",
      cond: condi,
      instr: instru
    }
  }
  
ARGUMENTO
  = exp:EXPRESION {
    return {
      type: "ARGUMENTO",
      value: exp
    }
  }
  / id:$ID {
      return {
        type: "ARGUMENTO",
        value: id
      }
  }

CONDICION
  = "odd" exp:EXPRESION{
    return{
      type: "CONDICION ODD",
      value: exp
    }
  }
  / expl:EXPRESION oper:COMPARISONOPERATOR expr:EXPRESION{
    return{
      type: "CONDICION",
      leftT: expl,
      op: oper,
      rightT: expr
    }
  }

EXPRESION
  = left:TERM oper:ADDOP right:EXPRESION{
    return{
      type: "EXPRESION",
      leftT: left,
      op: oper,
      rightT: right
    }
  }
  / left:TERM{
    return{
      type: "EXPRESION",
      value: left
    }
  }
  
TERM
  = left:FACTOR oper:MULOP right:TERM{
    return{
      type: "TERM",
      leftT: left,
      op: oper,
      rightT: right
    }
  }
  / left:FACTOR{
    return{
      type: "TERM",
      value: left
    }
  }

FACTOR
  = LEFTPAR exp:EXPRESION RIGHTPAR {
    return {
      type: "FACTOR",
      value: expression
    }
  }
  / int:$integer {
      return {
        type: "FACTOR",
        value: int
      }
  }
  / id:ID {
      return {
        type: "FACTOR",
        value: id
      }
  }
  
ADDOP = PLUS / MINUS
MULOP = MULT / DIV
PLUS = _"+"_
MINUS = _"-"_
MULT = _"*"_
DIV = _"/"_
NUM = _ $[0-9]+ _
ID = _ $([a-z_]i$([a-z0-9_]i*)) _
COMPARISONOPERATOR = MENOR / MENORQUE / MAYOR / MAYORQUE / IGUAL / HASH
MENOR = _"<"_ { return '<'; }
MENORQUE = _"<="_ { return '<='; }
MAYOR = _">"_ { return '>'; }
MAYORQUE = _">="_ { return '>='; }
IGUAL = _"="_ { return '='; }
HASH = _"#"_ { return '#'; }